// "units" module is expected to be imported for this module
// Not imported directly to avoid circular reference in imports that causes node-sass to break

// Parse given value and determine if it contains !important modifier
//
// @param string|number|list $value     Value to parse
// @return list ($value, $important)
@function parse-important($value) {
    $important: false;
    @if (type-of($value) == list and index($value, !important) == length($value)) {
        $important: true;
        $nv: ();
        @for $i from 1 through length($value) - 1 {
            $nv: append($nv, nth($value, $i));
        }
        $value: $nv;
    } @else if (type-of($value) == string and str-slice($value, -11) == ' !important') {
        $important: true;
        $value: str-slice($value, 0, -11);
        @while str-slice($value, -1) == ' ' {
            $value: str-slice($value, 0, -2);
        }
    }
    @return ($value, $important);
}

// Perform value rounding with respect to possible use of rem units
//
// @param number $value
// @return number
@function uround($value) {
    @if (current-unit(true) == px) {
        $value: round($value);
    }
    @return $value;
}

// Calculate additional offset required to center element of given $size within container of $total size
//
// @param number $total         Total container size
// @param number $size          Size of element to center
// @param number $compensation  Additional compensation to apply
// @return number
@function centered($total, $size, $compensation: 0) {
    @return uround((v($total) - v($size)) / 2) + v($compensation);
}

// Convert given unicode character code into unicode char reference
// unicode("e655"); // "\e655"
//
// @source - [@Stephn-R](https://github.com/sass/sass/issues/1395#issuecomment-57483844)
// @description converts 1 or more characters into a unicode
// @markup {scss}
// @param string $str   Unicode character code to convert
// @return string
@function unicode($str) {
    @if (str-slice($str, 1, 1) != str-slice("\\", 1, 1)) {
        $str: unquote(str-insert($str, str-slice("\\", 1, 1), 1));
    }
    @return unquote("\"")+$str+unquote("\"")
}

// Strip units from given number
// https://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass/12335841#12335841
//
// @param number $number
// @return number
@function strip-units($number) {
    @return $number / ($number * 0 + 1);
}

// Convert percent value into number
//
// @param percent $percent      Percent value to convert
// @param boolean $fraction     true to return [0..1] range value, false to return [0..100] range value
// @return number
@function from-percent($percent, $fraction: true) {
    $value: strip-units($percent);
    @if ($fraction) {
        $value: $value / 100;
    }
    @return $value;
}

// Add `$unit` to `$value`
//
// @param {Number} $value - Value to add unit to
// @param {String} $unit - String representation of the unit
// @return {Number} - `$value` expressed in `$unit`
// @author Hugo Giraudel
// @url http://www.sassmeister.com/gist/9fa19d254864f33d4a80
@function to-length($value, $unit) {
    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

    @if not index(map-keys($units), $unit) {
        @error 'Invalid unit `#{$unit}`.';
    }

    @return $value * map-get($units, $unit);
}

// Casts a string into a number
//
// @param {String | Number} $value - Value to be parsed
// @return {Number}
// @author Hugo Giraudel
// @url http://www.sassmeister.com/gist/9fa19d254864f33d4a80
@function to-number($value) {
    @if type-of($value) == 'number' {
        @return $value;
    } @else if type-of($value) != 'string' {
        @error 'Value for `to-number` should be a number or a string.';
    }

    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from if($minus, 2, 1) through str-length($value) {
        $character: str-slice($value, $i, $i);

        @if not (index(map-keys($numbers), $character) or $character == '.') {
            @return to-length(if($minus, -$result, $result), str-slice($value, $i))
        }

        @if $character == '.' {
            $digits: 1;
        } @else if $digits == 0 {
            $result: $result * 10 + map-get($numbers, $character);
        } @else {
            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }

    @return if($minus, -$result, $result);
}

// Slightly lighten a color
// Analog of tint function in InDesign
// 
// @access public
// @param {Color} $color - color to tint
// @param {Number} $percentage - percentage of `$color` in returned color
// @return {Color}
// @author Hugo Giraudel
// @url https://css-tricks.com/snippets/sass/tint-shade-functions/
@function tint($color, $percentage) {
    @return mix(white, $color, 100% - $percentage);
}
