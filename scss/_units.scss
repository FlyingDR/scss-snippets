$units-current-unit: px !default;
$units-rem-font-size: 16px !default;
$units-unit-size: 20px !default;
$units-initialized: false !default;

// Normalize given value and convert its units if necessary
//
// @param string|number|list $value     Value to normalize
// @param boolean|null $unit            Override current unit for this value
// @return string|number|list $value
@function v($value, $unit: null) {
    $parsed: parse-important($value);
    $value: nth($parsed, 1);
    $important: nth($parsed, 2);
    $result: ();
    @if ($unit == null) {
        $unit: $units-current-unit;
    }
    @each $v in $value {
        @if (type-of($v) == list and length($v) == 1) {
            $v: nth($v, 1);
        }
        @if (type-of($v) == number) {
            @if (unitless($v) and $v != 0) {
                //noinspection CssInvalidFunction
                $v: u($v);
            } @else if ($v == 0 or not index((px, rem), unit($v))) {
                $v: $v;
            } @else if (unit($v) != $unit) {
                $from: unit($v);
                @if ($from == px and $unit == rem) {
                    $v: $v * 1rem / $units-rem-font-size;
                } @else if ($from == rem and $unit == px) {
                    $v: $v * $units-rem-font-size / 1rem;
                } @else {
                    @warn 'Unsupported units conversion from "#{$from}" to #{$unit}';
                }
            }
        }
        @if ($v != '' and $v != null) {
            $result: append($result, $v);
        }
    }
    @if ($important) {
        $result: append($result, !important);
    }
    @if (length($result) == 0) {
        @return null;
    } @else if (length($result) == 1) {
        @return nth($result, 1);
    } @else {
        @return $result;
    }
}

// Define length in "units"
//
// @param number $value         Amount of units to use
// @param boolean|null $unit    Override current unit for this value
// @return number
@function u($value: 1, $unit: null) {
    @if ($value == 0) {
        @return 0;
    }
    @if (type-of($value) == number) {
        @if (not unitless($value)) {
            $value: v($value, px) / 1px;
        }
        @return v(uround($units-unit-size * $value), $unit);
    } @else {
        @error 'Only number values are accepted for u()';
    }
}

// Backward compatible alias for u() function
@function spacer($value: 1, $unit: null) {
    @return u($value, $unit);
}

// Get information about current unit
//
// @param boolean $get-unit     true to get current unit name (e.g. "px"), false to get base number of current unit (e.g. 1px) (default)
// @return number|string
@function current-unit($get-unit: false) {
    @if ($units-current-unit == rem) {
        @if ($get-unit) {
            @return rem;
        } @else {
            @return 1rem;
        }
    } @else {
        @if ($get-unit) {
            @return px;
        } @else {
            @return 1px;
        }
    }
}

// Initialize units module
//
// @param string $unit              Unit to use (px or rem)
// @param number $rem-font-size     Base size for rem unit
// @param number $unit-size         Size of single "unit" for u() function
@mixin units-init($unit: $units-current-unit, $rem-font-size: $units-rem-font-size, $unit-size: $units-unit-size) {
    @if (not $units-initialized) {
        @if (index(px rem, $unit)) {
            $units-current-unit: $unit !global;
        } @else {
            @error 'Only "px" or "rem" units are supported for "units" module';
        }
        @if (type-of($rem-font-size) == number and unit($rem-font-size) == px) {
            $units-rem-font-size: $rem-font-size !global;
        } @else {
            @warn '$rem-font-size should be set in px';
        }
        @if (type-of($unit-size) == number and unit($unit-size) == px) {
            $units-unit-size: $unit-size !global;
        } @else {
            @warn '$unit-size should be set in px';
        }
        @if ($units-current-unit) {
            html, body {
                font-size: $units-rem-font-size;
            }
        }
    }
}
