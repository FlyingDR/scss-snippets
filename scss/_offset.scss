$offset-cache-options-normalizer: () !default;
$offset-cache-options-handler: () !default;
$offset-cache-values-handler: () !default;
$offset-properties-parser-id: scss-snippets-offset;

// Parse given offset information
//
// @param list $offset          List of offset properties to parse
// @param list|map $options     Offset options to use for parsing (will override options given in $offset)
// @return map
@function parse-offset($offset, $options: null) {
    @if (not properties-parser-is-registered($offset-properties-parser-id)) {
        $p: register-properties-parser($offset-properties-parser-id, (
            prepare: (
                offset-property-parser-options-handler,
                offset-property-parser-values-handler,
            ),
            parse: (
                offset-property-parser-values-renderer,
            ),
            normalize: (
                offset-property-parser-offset-flip-normalizer,
            ),
        ), (
            layout: null,
            auto: false,
            important: false,
            negative: false,
            property: margin,
            group: true,
            flip: false,
        ));
    }
    @return parse-properties($offset-properties-parser-id, $offset, $options);
}

// Generate element offsets based on provided information
//
// @param list $offset          List of offset properties to parse
// @param list|map $options     Offset options to use for parsing (will override options given in $offset)
@mixin offset($offset, $options: null) {
    @each $prop, $value in parse-offset($offset, $options) {
        #{$prop}: $value;
    }
}

// Generate element offsets based on information from responsive configuration
//
// @param string $key           Key into responsive configuration to use
// @param list $offset          List of offset properties to parse
// @param list|map $options     Offset options to use for parsing (will override options given in $offset)
@mixin r-offset($key, $options: null) {
    @if (function-exists(is-responsive) and is-responsive()) {
        @include r-each-if($key) {
            @include offset(r-get(), $options);
        }
    }
}

// Flip horizontal offsets e.g. to simplify conversion from LTR to RTL layout and vice versa
//
// @param boolean $status      Offset keys flipping status
@mixin offset-flip($status: true) {
    $current: map-get(properties-parser-get-default-options($offset-properties-parser-id), flip);
    $null: properties-parser-set-default-option($offset-properties-parser-id, flip, $status);
    @content;
    $null: properties-parser-set-default-option($offset-properties-parser-id, flip, $current);
}

// Offset options normalization. Part of offset properties parser handlers set
//
// @param list|map $options     Offset options to normalize
// @return map
// @internal
@function offset-normalize-options($options) {
    $cache-key: inspect($options);
    @if (map-has-key($offset-cache-options-normalizer, $cache-key)) {
        @return map-get($offset-cache-options-normalizer, $cache-key);
    }

    $option-keys: map-keys(properties-parser-get-default-options($offset-properties-parser-id));
    $layouts: (
        t: top,
        b: bottom,
        l: left,
        r: right,
        v: vertical,
        h: horizontal,
    );
    $css-properties: (
        m: margin,
        p: padding,
    );
    $negative: (n, negative);
    $important: (i, important, '!', '!important');
    $resulted-options: ();
    $remaining-properties: ();
    @if (type-of($options) == map) {
        @each $name, $value in $options {
            @if ($name == layout and index(map-values($layouts), $value)) {
                $resulted-options: map-merge($resulted-options, (layout: $value));
            } @else if ($name == auto or $name == important or $name == negative) {
                @if ($value) {
                    $value: true;
                } @else {
                    $value: false;
                }
                $resulted-options: map-merge($resulted-options, ($name: $value));
            } @else if ($name == property and index(map-values($css-properties), $value)) {
                $resulted-options: map-merge($resulted-options, (property: $value));
            } @else if (index($option-keys, $name)) {
                $resulted-options: map-merge($resulted-options, ($name: $value));
            }
        }
    } @else if (type-of($options) == list or type-of($options) == string or type-of($options) == number) {
        @each $option in $options {
            @if (type-of($option) == string) {
                $option: to-lower-case($option);
                @if (index(map-values($layouts), $option)) {
                    $resulted-options: map-merge($resulted-options, (layout: $option));
                } @else if (index(map-values($css-properties), $option)) {
                    $resulted-options: map-merge($resulted-options, (property: $option));
                } @else if (index($important, $option)) {
                    $resulted-options: map-merge($resulted-options, (important: true));
                } @else if (index($negative, $option)) {
                    $resulted-options: map-merge($resulted-options, (negative: true));
                } @else if ($option == auto) {
                    $resulted-options: map-merge($resulted-options, (auto: true));
                } @else if ($option == flip) {
                    $resulted-options: map-merge($resulted-options, (flip: true));
                } @else {
                    @for $i from 1 through str-length($option) {
                        $char: str-slice($option, $i, $i);
                        @if (map-has-key($layouts, $char)) {
                            $resulted-options: map-merge($resulted-options, (layout: map-get($layouts, $char)));
                        } @else if (map-has-key($css-properties, $char)) {
                            $resulted-options: map-merge($resulted-options, (property: map-get($css-properties, $char)));
                        } @else if (index($important, $char)) {
                            $resulted-options: map-merge($resulted-options, (important: true));
                        } @else if (index($negative, $char)) {
                            $resulted-options: map-merge($resulted-options, (negative: true));
                        } @else if ($char == 'a') {
                            $resulted-options: map-merge($resulted-options, (auto: true));
                        } @else if ($char == 'f') {
                            $resulted-options: map-merge($resulted-options, (flip: true));
                        }
                    }
                }
            } @else {
                $remaining-properties: append($remaining-properties, v($option));
            }
        }
    }

    $result: (properties: $remaining-properties, options: $resulted-options);
    $offset-cache-options-normalizer: map-merge($offset-cache-options-normalizer, ($cache-key: $result)) !global;
    @return $result;
}

// Offset options parser handler. Part of offset properties parser handlers set
//
// @param list $properties
// @param map $options
// @return map
// @internal
@function offset-property-parser-options-handler($properties, $options) {
    $cache-key: inspect(join(join($properties, $options), properties-parser-get-default-options($offset-properties-parser-id)));
    @if (map-has-key($offset-cache-options-handler, $cache-key)) {
        @return map-get($offset-cache-options-handler, $cache-key);
    }

    $parsed-properties: offset-normalize-options($properties);
    $parsed-options: offset-normalize-options($options);
    $resulted-properties: ();
    $p: null;
    @if (map-has-key($parsed-properties, properties)) {
        $p: map-get($parsed-properties, properties);
        @if (type-of($p) == list and length($p)) {
            $resulted-properties: join($resulted-properties, $p);
        }
    }
    $p: null;
    @if (map-has-key($parsed-options, properties)) {
        $p: map-get($parsed-options, properties);
        @if (type-of($p) == list and length($p)) {
            $resulted-properties: join($resulted-properties, $p);
        }
    }
    $resulted-options: properties-parser-get-default-options($offset-properties-parser-id);
    $p: null;
    @if (map-has-key($parsed-properties, options)) {
        $p: map-get($parsed-properties, options);
        @if (type-of($p) == map and length($p)) {
            $resulted-options: map-merge($resulted-options, $p);
        }
    }
    $p: null;
    @if (map-has-key($parsed-options, options)) {
        $p: map-get($parsed-options, options);
        @if (type-of($p) == map and length($p)) {
            $resulted-options: map-merge($resulted-options, $p);
        }
    }

    $result: (properties: $resulted-properties, options: $resulted-options);
    $offset-cache-options-handler: map-merge($offset-cache-options-handler, ($cache-key: $result)) !global;
    @return $result;
}

// Offset options parser handler. Part of offset properties parser handlers set
//
// @param list $properties
// @param map $options
// @return map
// @internal
@function offset-property-parser-values-handler($properties, $options) {
    $cache-key: inspect(join($properties, $options));
    @if (map-has-key($offset-cache-values-handler, $cache-key)) {
        @return map-get($offset-cache-values-handler, $cache-key);
    }

    $layout: map-get($options, layout);
    $auto: map-get($options, auto);
    $property: map-get($options, property);
    $group: map-get($options, group);
    $result: ();

    @if (index((top, bottom, left, right), $layout) and length($properties) >= 1) {
        $result: map-merge($result, (#{$property}-#{$layout}: nth($properties, 1)));
    } @else if (index((vertical, horizontal), $layout) and length($properties) >= 1) {
        $first: nth($properties, 1);
        $second: null;
        @if (length($properties) >= 2) {
            $second: nth($properties, 2);
        }
        @if ($group) {
            @if ($auto) {
                @if ($layout == vertical) {
                    @if ($second != null) {
                        $result: map-merge($result, (#{$property}: $first auto $second));
                    } @else {
                        $result: map-merge($result, (#{$property}: $first auto));
                    }
                } @else {
                    @if ($second != null) {
                        $result: map-merge($result, (#{$property}: auto $first auto $second));
                    } @else {
                        $result: map-merge($result, (#{$property}: auto $first));
                    }
                }
            } @else {
                @if ($second == null) {
                    $second: $first;
                }
                @if ($layout == vertical) {
                    $result: map-merge($result, (#{$property}-top: $first, #{$property}-bottom: $second));
                } @else {
                    $result: map-merge($result, (#{$property}-left: $second, #{$property}-right: $first));
                }
            }
        } @else {
            @if ($second == null) {
                $second: $first;
            }
            $first: $first;
            $second: $second;
            $a: auto;
            @if ($layout == vertical) {
                $result: map-merge($result, (
                    #{$property}-top: $first,
                    #{$property}-bottom: $second,
                ));
            } @else {
                $result: map-merge($result, (
                    #{$property}-left: $second,
                    #{$property}-right: $first,
                ));
            }
            @if ($auto) {
                @if ($layout == vertical) {
                    $result: map-merge($result, (
                        #{$property}-right: $a,
                        #{$property}-left: $a,
                    ));
                } @else {
                    $result: map-merge($result, (
                        #{$property}-top: $a,
                        #{$property}-bottom: $a,
                    ));
                }
            }
        }
    } @else {
        @if ($group) {
            $result: map-merge($result, (#{$property}: $properties));
        } @else {
            @if (length($properties) == 1) {
                $v: nth($properties, 1);
                $result: map-merge($result, (
                    #{$property}-top: $v,
                    #{$property}-right: $v,
                    #{$property}-bottom: $v,
                    #{$property}-left: $v,
                ));
            } @else if (length($properties) == 2) {
                $y: nth($properties, 1);
                $x: nth($properties, 2);
                $result: map-merge($result, (
                    #{$property}-top: $y,
                    #{$property}-right: $x,
                    #{$property}-bottom: $y,
                    #{$property}-left: $x,
                ));
            } @else if (length($properties) == 3) {
                $t: nth($properties, 1);
                $rl: nth($properties, 2);
                $b: nth($properties, 3);
                $result: map-merge($result, (
                    #{$property}-top: $t,
                    #{$property}-right: $rl,
                    #{$property}-bottom: $b,
                    #{$property}-left: $rl,
                ));
            } @else if (length($properties) >= 4) {
                $t: nth($properties, 1);
                $r: nth($properties, 2);
                $b: nth($properties, 3);
                $l: nth($properties, 4);
                $result: map-merge($result, (
                    #{$property}-top: $t,
                    #{$property}-right: $r,
                    #{$property}-bottom: $b,
                    #{$property}-left: $l,
                ));
            }
        }
    }

    $result: (properties: $result);
    $offset-cache-values-handler: map-merge($offset-cache-values-handler, ($cache-key: $result)) !global;
    @return $result;
}

// Offset options parser handler. Part of offset properties parser handlers set
//
// @param mixed $value
// @param map $result
// @param map $options
// @return map
// @internal
@function offset-property-parser-values-renderer($value, $result, $options) {
    $property: nth($value, 1);
    $value: nth($value, 2);
    @if (map-get($options, negative)) {
        @if (type-of($value) == list) {
            $r: ();
            @each $v in $value {
                @if (type-of($v) == number and $v != 0) {
                    $v: 0 - $v;
                }
                $r: append($r, $v);
            }
            $value: $r;
        } @else if (type-of($value) == number and $value != 0) {
            $value: 0 - $value;
        }
    }
    @if (map-get($options, important)) {
        $value: append($value, unquote('!important'));
    }
    @return ($property: $value);
}

@function offset-property-parser-offset-flip-normalizer($result, $options) {
    @if (map-has-key($options, flip) and map-get($options, flip)) {
        $keys-map: (
            margin-left: margin-right,
            margin-right: margin-left,
            padding-left: padding-right,
            padding-right: padding-left,
        );
        $r: ();
        @each $key, $value in $result {
            @if (map-has-key($keys-map, $key)) {
                $key: map-get($keys-map, $key);
            }
            $r: map-merge($r, ($key: $value));
        }
        $result: $r;
    }
    @return $result;
}
