// Parse given offset information 
// 
// @param list $offset          List of offset properties to parse
// @param list|map $options     Offset options to use for parsing (will override options given in $offset)
// @return map
@function parse-offset($offset, $options: null) {
    $parser-id: scss-snippets-offset;
    @if (not properties-parser-is-registered($parser-id)) {
        $p: register-properties-parser($parser-id);
        $p: properties-parser-add-handler($parser-id, offset-property-parser-options-handler, prepare);
        $p: properties-parser-add-handler($parser-id, offset-property-parser-values-handler, prepare);
        $p: properties-parser-add-handler($parser-id, offset-property-parser-values-renderer, parse);
    }
    @return parse-properties($parser-id, $offset, $options);
}

// Generate element offsets based on provided information
// 
// @param list $offset          List of offset properties to parse
// @param list|map $options     Offset options to use for parsing (will override options given in $offset)
@mixin offset($offset, $options: null) {
    @each $prop, $value in parse-offset($offset, $options) {
        #{$prop}: $value;
    }
}

// Generate element offsets based on information from responsive configuration
// 
// @param string $key           Key into responsive configuration to use
// @param list $offset          List of offset properties to parse
// @param list|map $options     Offset options to use for parsing (will override options given in $offset)
@mixin r-offset($key, $options: null) {
    @if (function-exists(is-responsive) and is-responsive()) {
        @include r-each-if($key) {
            @include offset(r-get(), $options);
        }
    }
}

// Offset options normalization. Part of offset properties parser handlers set
// 
// @param list|map $options     Offset options to normalize
// @return map
// @internal
@function offset-normalize-options($options) {
    $option-keys: layout auto important property;
    $layouts: (
        t: top,
        b: bottom,
        l: left,
        r: right,
        v: vertical,
        h: horizontal,
    );
    $css-properties: (
        m: margin,
        p: padding,
    );
    $important: (i, important, '!', '!important');
    $r-options: ();
    $remaining: ();
    @if (type-of($options) == map) {
        @each $name, $value in $options {
            @if ($name == layout and index(map-values($layouts, $value))) {
                $r-options: map-merge($r-options, (layout: $value));
            } @else if ($name == auto or $name == important) {
                @if ($value) {
                    $value: true;
                } @else {
                    $value: false;
                }
                $r-options: map-merge($r-options, ($name: $value));
            } @else if ($name == property and index(map-values($css-properties), $value)) {
                $r-options: map-merge($r-options, (property: $value));
            }
        }
    } @else if (type-of($options) == list or type-of($options) == string or type-of($options) == number) {
        @each $option in $options {
            @if (type-of($option) == string) {
                $option: to-lower-case($option);
                @if (index($layouts, $option)) {
                    $r-options: map-merge($r-options, (layout: $option));
                } @else if (index($css-properties, $option)) {
                    $r-options: map-merge($r-options, (property: $option));
                } @else if (index($important, $option)) {
                    $r-options: map-merge($r-options, (important: true));
                } @else if ($option == auto) {
                    $r-options: map-merge($r-options, (auto: true));
                } @else {
                    @for $i from 1 through str-length($option) {
                        $char: str-slice($option, $i, $i);
                        @if (map-has-key($layouts, $char)) {
                            $r-options: map-merge($r-options, (layout: map-get($layouts, $char)));
                        } @else if (map-has-key($css-properties, $char)) {
                            $r-options: map-merge($r-options, (property: map-get($css-properties, $char)));
                        } @else if (index($important, $char)) {
                            $r-options: map-merge($r-options, (important: true));
                        } @else if ($char == 'a') {
                            $r-options: map-merge($r-options, (auto: true));
                        }
                    }
                }
            } @else {
                $remaining: append($remaining, v($option));
            }
        }
    }
    @return (properties: $remaining, options: $r-options);
}

// Offset options parser handler. Part of offset properties parser handlers set
// 
// @param list $properties 
// @param map $options     
// @return map
// @internal
@function offset-property-parser-options-handler($properties, $options) {
    $default-options: (
        layout: null,
        auto: false,
        important: false,
        property: margin
    );
    $parsed-properties: offset-normalize-options($properties);
    $parsed-options: offset-normalize-options($options);
    $r-properties: ();
    $p: null;
    @if (map-has-key($parsed-properties, properties)) {
        $p: map-get($parsed-properties, properties);
        @if (type-of($p) == list and length($p)) {
            $r-properties: join($r-properties, $p);
        }
    }
    $p: null;
    @if (map-has-key($parsed-options, properties)) {
        $p: map-get($parsed-options, properties);
        @if (type-of($p) == list and length($p)) {
            $r-properties: join($r-properties, $p);
        }
    }
    $r-options: $default-options;
    $p: null;
    @if (map-has-key($parsed-properties, options)) {
        $p: map-get($parsed-properties, options);
        @if (type-of($p) == map and length($p)) {
            $r-options: map-merge($r-options, $p);
        }
    }
    $p: null;
    @if (map-has-key($parsed-options, options)) {
        $p: map-get($parsed-options, options);
        @if (type-of($p) == map and length($p)) {
            $r-options: map-merge($r-options, $p);
        }
    }
    @return (properties: $r-properties, options: $r-options);
}

// Offset options parser handler. Part of offset properties parser handlers set
// 
// @param list $properties      
// @param map $options     
// @return map
// @internal
@function offset-property-parser-values-handler($properties, $options) {
    $layout: map-get($options, layout);
    $auto: map-get($options, auto);
    $important: map-get($options, important);
    $property: map-get($options, property);
    $result: ();

    @if ($important) {
        $important: unquote('!important');
    } @else {
        $important: null;
    }
    @if (index((top, bottom, left, right), $layout) and length($properties) >= 1) {
        $result: map-merge($result, (#{$property}-#{$layout}: append(nth($properties, 1), $important)));
    } @else if (index((vertical, horizontal), $layout) and length($properties) >= 1) {
        $first: nth($properties, 1);
        $second: null;
        @if (length($properties) >= 2) {
            $second: nth($properties, 2);
        }
        @if ($auto) {
            @if ($layout == vertical) {
                @if ($second != null) {
                    $result: map-merge($result, (#{$property}: append($first auto $second, $important)));
                } @else {
                    $result: map-merge($result, (#{$property}: append($first auto, $important)));
                }
            } @else {
                @if ($second != null) {
                    $result: map-merge($result, (#{$property}: append(auto $first auto $second, $important)));
                } @else {
                    $result: map-merge($result, (#{$property}: append(auto $first, $important)));
                }
            }
        } @else {
            @if ($second == null) {
                $second: $first;
            }
            @if ($layout == vertical) {
                $result: map-merge($result, (#{$property}-top: append($first, $important), #{$property}-bottom: append($second, $important)));
            } @else {
                $result: map-merge($result, (#{$property}-left: append($second, $important), #{$property}-right:append($first, $important)));
            }
        }
    } @else {
        $result: map-merge($result, (#{$property}: append($properties, $important)));
    }
    @return (properties: $result);
}

// Offset options parser handler. Part of offset properties parser handlers set
// 
// @param mixed $value
// @param map $result
// @param map $options     
// @return map
// @internal
@function offset-property-parser-values-renderer($value, $result, $options) {
    @return (nth($value, 1): nth($value, 2));
}
