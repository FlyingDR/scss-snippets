@import "units";

$font-files: () !default;
$font-families: () !default;
$font-sizes: () !default;
$font-file-formats: (
    eot: embedded-opentype,
    woff: woff,
    woff2: woff2,
    ttf: truetype,
    svg: svg,
) !default;
$font-default-formats: woff ttf eot svg !default;
$font-default-properties: (
    font-weight: normal,
    font-style: normal,
) !default;

// Get font size by name
//
// @param string $size  Registered font size name
@function font-size($size) {
    $sizes: px, em;
    @if ((type-of($size) == number) and index($sizes, unit($size))) {
        @return v($size);
    } @else if (not map-has-key($font-sizes, $size)) {
        @warn 'Unkown font size: ' + $size;
    }
    @return v(map-get($font-sizes, $size));
}

// Set font-size CSS property with given font size name
//
// @param string $size  Registered font size name
@mixin font-size($size) {
    font-size: font-size($size);
}

// Parse given font string into set of CSS properties and their values
//
// @param list $font  Font values list to parse
// @return map
// noinspection SassScssResolvedByNameOnly
@function parse-font($font) {
    @if (type-of($font) == map) {
        // Treat map argument as "already parsed font properties"
        @return $font;
    }
    $weights: normal, bold, bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, 900;
    $styles: normal, italic, oblique;
    $whitespace: normal, pre, nowrap, pre-wrap, pre-line;
    $transform: none, capitalize, uppercase, lowercase, full-width;
    $named-font-sizes: xx-small, x-small, small, medium, large, x-large, xx-large, larger, smaller;
    $font-size-units: px, em, rem, vw, vh, vmin, vmax;
    $letter-spacing-units: px, em, rem;
    $added: '';
    $properties: ();
    @each $item in $font {
        $ik: null;
        $iv: $item;
        @if (not index($added, font-family) and map-has-key($font-families, $item)) {
            $ik: font-family;
            $iv: join(map-get($font-families, $item), (), comma);
        } @else if (not index($added, font-size) and function-exists(r-mq) and map-has-key($font-sizes, 'responsive-' + r-mq() + '-' + $item)) {
            $ik: font-size;
            $iv: map-get($font-sizes, 'responsive-' + r-mq() + '-' + $item);
        } @else if (not index($added, font-size) and global-variable-exists(responsive-default-mq) and map-has-key($font-sizes, 'responsive-' + $responsive-default-mq + '-' + $item)) {
            $ik: font-size;
            $iv: map-get($font-sizes, 'responsive-' + $responsive-default-mq + '-' + $item);
        } @else if (not index($added, font-size) and index($named-font-sizes, $item)) {
            $ik: font-size;
        } @else if (not index($added, font-size) and map-has-key($font-sizes, $item)) {
            $ik: font-size;
            $iv: map-get($font-sizes, $item);
        } @else if (not index($added, font-size) and (type-of($item) == number) and index($font-size-units, unit($item))) {
            $ik: font-size;
            $iv: $item;
        } @else if (not index($added, font-weight) and index($weights, $item)) {
            $ik: font-weight;
        } @else if (not index($added, font-style) and index($styles, $item)) {
            $ik: font-style;
        } @else if (not index($added, color) and (type-of($item) == color)) {
            $ik: color;
        } @else if (not index($added, line-height) and (type-of($item) == number) and not ((unit($item) == em) and (abs($item) <= 0.5))) {
            $ik: line-height;
        } @else if (not index($added, letter-spacing) and (type-of($item) == number and index($letter-spacing-units, unit($item)))) {
            $ik: letter-spacing;
        } @else if (not index($added, white-space) and index($whitespace, $item)) {
            $ik: white-space;
        } @else if (not index($added, text-transform) and index($transform, $item)) {
            $ik: text-transform;
        }
        @if ($ik != null) {
            @if (($ik == font-size) and (type-of($iv) == number) and (index(px rem, unit($iv)))) {
                $iv: v($iv);
            }
            $properties: map-merge($properties, ($ik: $iv));
            $added: append($added, $ik);
        }
    }
    @return $properties;
}

// Generate font CSS properties from given font string
//
// @param list|map $font      Either list of font values list to parse or already parsed list of font properties
// @param list $important     List of font properties that should be marked as important
// @param map $modifications    Map of font properties modifications to apply to given font values
@mixin font($font, $important: '', $modifications: null) {
    $font: parse-font($font);
    @if (type-of($modifications) == map) {
        $font: map-merge($font, $modifications);
    }
    @each $prop, $value in $font {
        @if (index($important, $prop) != null) {
            #{$prop}: $value !important;
        } @else {
            #{$prop}: $value;

        }
    }
}

// Register custom font to use in application
//
// @param string $id                Font Id to use in application
// @param string|list $font-names   List of font family names to use for this font e.g. (Tahoma, Helvetica, Arial, sans-serif)
// @param string|map $filename      One of:
//                                  - base file name (without extension) of font file if file is stored locally
//                                  - map ($filename: $properties)
//                                  - map: ($filename: (properties: $properties, formats: $formats))
// @param string|list $properties   String for parse-font() or list of additional font CSS properties to put in @font-face definition, e.g. (font-weight: bold), defaults to $font-default-properties
// @param list $formats             List of file formats for locally stored font file, defaults to $font-default-formats
@mixin register-font($id, $font-names, $filename: null, $properties: null, $formats: null) {
    @if (type-of($font-names) != list) {
        $font-names: ($font-names);
    }
    $font-families: map-merge($font-families, ($id: $font-names)) !global;
    @if ($filename != null) {
        $definitions: ();
        @if (type-of($filename) == string) {
            $filename: ($filename: (properties: $properties, formats: $formats));
        }
        @if ($properties == null) {
            $properties: $font-default-properties;
        } @else if (type-of($properties) == list) {
            $properties: parse-font($properties);
        }
        @if ($formats == null) {
            $formats: $font-default-formats;
        }
        @each $fname, $fdef in $filename {
            $fprop: null;
            $fformats: null;
            @if (type-of($fdef) == string) {
                $fprop: $fdef;
            } @else if (type-of($fdef) == list) {
                @if ((length($fdef) == 2) and (type-of(nth($fdef, 2)) == map)) {
                    // This is list of properties and formats
                    $fprop: nth($fdef, 1);
                    $fformats: nth($fdef, 2);
                } @else {
                    // This is list of properties
                    $fprop: $fdef;
                }
            } @else if (type-of($fdef) == map) {
                @if (map-has-key($fdef, properties)) {
                    $fprop: map-get($fdef, properties);
                }
                @if (map-has-key($fdef, formats)) {
                    $fformats: map-get($fdef, formats);
                }
            }
            $definitions: map-merge($definitions, ($fname: (properties: $fprop, formats: $fformats)));
        }
        @each $fname, $fdef in $definitions {
            $fprop: map-get($fdef, properties);
            $fformats: map-get($fdef, formats);
            @if ($fprop == null) {
                $fprop: $properties;
            } @else if (type-of($fprop) == list) {
                $fprop: parse-font($fprop);
            }
            @if ($fformats == null) {
                $fformats: $formats;
            }
            $font-files: map-merge($font-files, ($fname: (name: nth($font-names, 1), formats: $fformats, properties: $fprop))) !global;
        }
    }
}

// Register named font size
//
// @param string|map $name  Either font size name or map of font sizes to register
// @param mixed $size       Font size to register (in a case if $name is a string)
@mixin register-font-size($name, $size: null) {
    $sizes: ();
    @if (type-of($name) == 'map') {
        $sizes: $name;
    } @else {
        $sizes: ($name: $size);
    }
    $font-sizes: map-merge($font-sizes, $sizes) !global;
}

// Render registered font faces definition
//
// @param map $fonts    Fonts definition to render
@mixin font-files($fonts: $font-files) {
    @each $filename, $info in $font-files {
        $formats: map-get($info, formats);
        @font-face {
            font-family: map-get($info, name);
            @if (index($formats, eot) != null) {
                src: font-url('#{$filename}.eot');
            }
            $sources: ();
            @if (index($formats, eot) != null) {
                $ff: map-get($font-file-formats, eot);
                $sources: append($sources, font-url('#{$filename}.eot?#iefix') format('#{$ff}'));
            }
            @each $extension in $formats {
                @if ($extension != eot) {
                    $ff: map-get($font-file-formats, $extension);
                    $sources: append($sources, font-url('#{$filename}.#{$extension}') format('#{$ff}'));
                }
            }
            src: join($sources, (), comma);
            @each $prop, $value in map-get($info, properties) {
                #{$prop}: $value;
            }
        }
    }
}
