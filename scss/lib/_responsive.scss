@import "susy";

$responsive-base-font-size: 15px !default;

$responsive-config: ();
$responsive-default-id: null;
$responsive-current-id: null;
$responsive-is-initialized: false;

// Register responsive configuration
//
// @param string $id        Responsive configuration id
// @param map $config       Responsive configuration
// @param boolean $default  Mark this responsive configuration as default
@mixin responsive-config($id, $config, $default: false) {
    @if (type-of($id) != string) {
        @error 'Responsive configuration id should be string';
    }
    @if (type-of($config) != map) {
        @error 'Responsive configuration should be defined as a map';
    }
    $responsive-config: map-merge($responsive-config, ($id: $config)) !global;
    @if ($default) {
        @if ($responsive-default-id != null) {
            @warn 'Default responsive configuration is already chosen for "' + $responsive-default-id + '"';
        } @else {
            $responsive-default-id: $id !global;
        }
    }
}

// Shorthand for responsive-config()
@mixin r-config($id, $config, $default: false) {
    @include responsive-config($id, $config, $default);
}

// Get normalized value of given responsive configuration id
//
// @param string|boolean|null $id   Responsive configuration id, one of:
//                                  - string - responsive configuration id to check for validity and return
//                                  - null or true - get current responsive configuration id if it is available,
//                                    fallback to default responsive configuration id if there is no explicit current configuration
//                                  - false - get current responsive configuration id if it is available,
//                                    return null if there is no explicit current configuration
// @return string|null
// noinspection CssInvalidFunction
@function responsive-id($id: null) {
    @if (type-of($id) == string) {
        @if (responsive-has-config($id)) {
            @return $id;
        } @else {
            @return null;
        }
    } @else if ($id == null or $id == true or $id == false) {
        @if ($responsive-current-id != null) {
            @return $responsive-current-id;
        } @else if ($id == false) {
            @return null;
        } @else {
            @return $responsive-default-id;
        }
    } @else {
        @error 'Unvalid type of responsive configuration id: ' + type-of($id);
        @return null;
    }
}

// Shorthand for responsive-id()
@function r-id($id: null) {
    @return responsive-id($id);
}

// Get list of available responsive configuration ids
//
// @return list
@function responsive-get-ids() {
    @return map-keys($responsive-config);
}

// Shorthand for responsive-get-ids()
@function r-get-ids() {
    @return responsive-get-ids();
}

// Check if there is responsive configuration with given id
//
// @param string $id            Responsive configuration id to check
// @return boolean
@function responsive-has-config($id) {
    @return map-has-key($responsive-config, $id);
}

// Shorthand for responsive-has-config()
@function r-has-config($id) {
    @return responsive-has-config($id);
}

// Get responsive configuration for given (or current or default) responsive configuration
//
// @param string|boolean|null $id   Responsive configuration id (@see responsive-id())
// @return map
@function responsive-get-config($id: null) {
    $id: responsive-id($id);
    @if ($id == null) {
        @error 'No responsive configuration id is given and no current configuration is available';
        @return ();
    } @else if (not responsive-has-config($id)) {
        @error 'Unknown responsive configuration id: ' + $id;
        @return ();
    }
    @return map-get($responsive-config, $id);
}

// Shorthand for responsive-get-config()
@function r-get-config($id: null) {
    @return responsive-get-config($id);
}

// Get configuration value from responsive config
//
// @param string $key               Configuration key name, multiple level keys are defined as a/b/c
// @param mixed $default            Default value for given configuration key (can be skipped)
// @param string|boolean|null $id   Responsive configuration id (@see responsive-id()) (can be passed instead of $default)
// @return mixed
// noinspection CssInvalidFunction
@function responsive-get($key, $default: null, $id: null) {
    @if ($id == null) {
        @if (responsive-has-config($default)) {
            $id: $default;
            $default: null;
        }
    }
    $id: responsive-id($id);
    $full-key: $key;
    $result: $default;
    @if (responsive-has-config($id)) {
        $r-cfg: responsive-get-config($id);
        $parts: ();
        @while str-index($key, '/') != null {
            $parts: append($parts, str-slice($key, 1, str-index($key, '/') - 1));
            $key: str-slice($key, str-index($key, '/') + 1);
        }
        $parts: append($parts, $key);
        $error: false;
        @each $p in $parts {
            @if (not $error) {
                @if (type-of($r-cfg) == map) {
                    @if (map-has-key($r-cfg, $p)) {
                        $result: map-get($r-cfg, $p);
                        $r-cfg: map-get($r-cfg, $p);
                    } @else {
                        $error: true;
                    }
                } @else {
                    $error: true;
                }
                @if ($error) {
                    $r-cfg: null;
                    @if (($key != parent) and (responsive-has(parent, $id)) and (responsive-has-config(responsive-get(parent, null, $id)))) {
                        $result: responsive-get($key, $default, responsive-get(parent, null, $id));
                    }
                    @if ($default == null) {
                        @warn "Unavailable configuration path '" + $full-key + "' for responsive configuraion '" + $id + "'";
                    }
                    $result: $default;
                }
            }
        }
    } @else {
        @warn "Unknown responsive configuraion id: " + $id;
    }
    @return $result;
}

// Shorthand for responsive-get()
@function r-get($key, $default: null, $id: null) {
    @return responsive-get($key, $default, $id);
}

// Test if given configuration key is available in from responsive config
//
// @param string $key               Configuration key name, multiple level keys are defined as a/b/c
// @param string|boolean|null $id   Responsive configuration id (@see responsive-id())
// @return boolean
@function responsive-has($key, $id: null) {
    $test: '___unavailable_key___';
    @return (responsive-get($key, $test, $id) != $test);
}

// Shorthand for responsive-has()
@function r-has($key, $id: null) {
    @return responsive-has($key, $id);
}

// Simplification of iteration over available media queries
//
// @param mixed $layout     true to use default layout from configuration
//                          false to disable layout use
//                          string to either specify configuration key of layout to use or explicit shorthand layout
//                          list or map to define explicit layout
// @param string $if-key    Apply media query configuration only if given key is exists in corresponding responsive configuration
@mixin responsive-each($layout: true, $if-key: null) {
    @each $id in responsive-get-ids() {
        $l: null;
        @if ($layout == true and responsive-has(layout, $id)) {
            $l: responsive-get(layout, $id);
        } @else if (type-of($layout) == string) {
            @if (responsive-has($layout, $id)) {
                $l: responsive-get($layout, $id);
            } @else {
                $l: $layout;
            }
        } @else if (type-of($layout) == list or type-of($layout) == map) {
            $l: $layout;
        }
        @if (($if-key == null) or (responsive-has($if-key, $id))) {
            @if ($responsive-current-id != null) {
                @if ($responsive-current-id == $id) {
                    @content;
                }
            } @else {
                $responsive-current-id: $id !global;
                @if (($responsive-current-id != $responsive-default-id) and (responsive-has(media-query, $id))) {
                    @include susy-breakpoint($id) {
                        @if ($l) {
                            @include with-layout($l) {
                                @content;
                            }
                        } @else {
                            @content;
                        }
                    }
                } @else {
                    @if ($l) {
                        @include with-layout($l) {
                            @content;
                        }
                    } @else {
                        @content;
                    }
                }
                $responsive-current-id: null !global;
            }
        }
    }
}

// Shorthand for responsive-each()
@mixin r-each($layout: true, $if-key: null) {
    @include responsive-each($layout, $if-key) {
        @content;
    }
}

// Shorthand for responsive-each() with mandatory $if-key
@mixin r-each-if($if-key, $layout: true) {
    @include responsive-each($layout, $if-key) {
        @content;
    }
}

// Initialize $susy and $susy-media based on information from responsive configuration
@mixin responsive-init() {
    @if (not $responsive-is-initialized) {
        @if (length(responsive-get-ids()) > 0) {
            @if ($responsive-default-id == null) {
                @warn 'Default responsive configuration is not defined';
            }
            @if (length($susy-media) == 0) {
                $susy-media: () !global;
                @each $id in responsive-get-ids() {
                    @if (responsive-has(media-query, $id)) {
                        $susy-media: map-merge($susy-media, ($id: responsive-get(media-query, $id))) !global;
                    }
                }
            }
            @if (length($susy) == 0) {
                @if (responsive-has(layout) and responsive-get(layout) != null) {
                    $susy: responsive-get(layout) !global;
                } @else {
                    @warn 'No default responsive layout is defined';
                }
            }
        }
        $base-font-size: $responsive-base-font-size !global;
        html, body {
            font-size: $base-font-size;
        }
        @include global-box-sizing();
        $responsive-is-initialized: true !global;
    }
}

// Determine if responsive module can be used
@function is-responsive()
{
    @return (length($responsive-config) > 0 and $responsive-is-initialized);
}
