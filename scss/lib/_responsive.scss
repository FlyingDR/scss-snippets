@import "susy";

$responsive-config: () !default;
$responsive-default-mq: null !default;
$responsive-base-font-size: 15px !default;

$_responsive-initialized: false;
$_responsive-current-mq: null;

// Get current media query Id within responsive-each()
//
// @return string
@function responsive-current-mq() {
    @if ($_responsive-current-mq != null) {
        @return $_responsive-current-mq;
    } @else {
        @return $responsive-default-mq;
    }
}

// Shorthand for responsive-current-mq()
@function r-mq() {
    @return responsive-current-mq();
}

// Get configuration value from responsive config
//
// @param string $key       Configuration key name, multiple level keys are defined as a/b/c
// @param mixed $default    Default value for given configuration key (can be skipped)
// @param string $mq        Media query Id to get configuration for (can be passed instead of $default)
// @param list $config      Configuration object to get value from
// @return mixed
@function responsive-get($key, $default: null, $mq: null, $config: $responsive-config) {
    @if (not $mq) {
        @if (map_has_key($config, $default)) {
            $mq: $default;
            $default: null;
        } @else {
            $mq: r-mq();
        }
    }
    $full_key: $key;
    $result: $default;
    @if (map_has_key($config, $mq)) {
        $mqcfg: map_get($config, $mq);
        $parts: ();
        @while str-index($key, '/') != null {
            $parts: append($parts, str-slice($key, 1, str-index($key, '/') - 1));
            $key: str-slice($key, str-index($key, '/') + 1);
        }
        $parts: append($parts, $key);
        $error: false;
        @each $p in $parts {
            @if (not $error) {
                @if (type_of($mqcfg) == map) {
                    @if (map_has_key($mqcfg, $p)) {
                        $result: map_get($mqcfg, $p);
                        $mqcfg: map_get($mqcfg, $p);
                    } @else {
                        $error: true;
                    }
                } @else {
                    $error: true;
                }
                @if ($error) {
                    $mqcfg: '___NO_MAP_IN_CONFIG___';
                    @if ($default == null) {
                        @warn "Unavailable configuration path '" + $full_key + "' for media query '" + $mq + "'";
                    }
                    $result: $default;
                }
            }
        }
    } @else {
        @warn "Unknown media query id: " + $mq;
    }
    @return $result;
}

// Shorthand for responsive-get()
@function r-get($key, $default: null, $mq: null, $config: $responsive-config) {
    @return responsive-get($key, $default, $mq, $config);
}

// Test if given configuration key is available in from responsive config
//
// @param string $key       Configuration key name, multiple level keys are defined as a/b/c
// @param string $mq        Media query Id to get configuration for (can be passed instead of $default)
// @param list $config      Configuration object to get value from
// @return boolean
@function responsive-has($key, $mq: null, $config: $responsive-config) {
    $test: '___unavailable_key___';
    @if (r-get($key, $test, $mq, $config) == $test) {
        @return false;
    } @else {
        @return true;
    }
}

// Shorthand for responsive-has()
@function r-has($key, $mq: null, $config: $responsive-config) {
    @return responsive-has($key, $mq, $config);
}

// Simplification of iteration over available media queries
//
// @param mixed $layout     true to use default layout from configuration
//                          false to disable layout use
//                          string to either specify configuration key of layout to use or explicit shorthand layout
//                          list or map to define explicit layout
// @param list $config      Configuration object to use
@mixin responsive-each($layout: true, $config: $responsive-config) {
    @each $mq in map-keys($config) {
        @include susy-breakpoint($mq) {
            $_responsive-current-mq: $mq !global;
            @if ($layout == false) {
                @content;
            } @else {
                $l: null;
                @if ($layout == true and r-has(layout, null, $config)) {
                    $l: r-get(layout, null, null, $config);
                } @else if (type_of($layout) == string) {
                    @if (r-has($layout, null, $config)) {
                        $l: r-get($layout, null, null, $config);
                    } @else {
                        $l: $layout;
                    }
                } @else if (type_of($layout) == list or type_of($layout) == map) {
                    $l: $layout;
                }
                @if ($l) {
                    @include with-layout($l) {
                        @content;
                    }
                } @else {
                    @content;
                }
            }
        }
    }
    $_responsive-current-mq: null !global;
}

// Initialize $susy and $susy-media based on information from $responsive-config
@mixin responsive-init() {
    @if (not $_responsive-initialized) {
        @if (length($responsive-config) > 0) {
            @if (not $responsive-default-mq) {
                @warn 'Default media query key is not defined in $responsive-default-mq';
            }
            @if (length($susy-media) == 0) {
                $susy-media: () !global;
                @each $mq in map-keys($responsive-config) {
                    $query: r-get(media-query, $mq, $config: $responsive-config);
                    @if ($query) {
                        $susy-media: map_merge($susy-media, ($mq: $query)) !global;
                    }
                }
            }
            @if (length($susy) == 0) {
                $layout: r-get(layout, $config: $responsive-config);
                @if ($layout != null) {
                    $susy: $layout !global;
                }
            }
        }
        $base-font-size: $responsive-base-font-size !global;
        html, body {
            font-size: $base-font-size;
        }
        @include global-box-sizing();
        $_responsive-initialized: true !global;
    }
}

@include responsive-init();
