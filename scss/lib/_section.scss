@import "susy";
@import "spacer";

%page-section {
    @include container();
    @include full();
    @include break();
    float: none;
    padding: 0;
    margin: 0 auto;
    //noinspection SassScssResolvedByNameOnly
    @if (function-exists(is-responsive) and is-responsive()) {
        @include r-each-if(layout, layout) {
            @include container();
            @if (r-has(page-padding)) {
                padding: 0 v(r-get(page-padding, 0));
            }
        }
    }
}

// Declare vertical margins and background for page section
//
// @param int|string|list $top  Either top margin or list with one or more parameters for mixin
// @param int|string $bottom    Bottom margin
// @param mixed $bg             Background for section
@mixin section($top: null, $bottom: null, $bg: null) {
    @if (type-of($top) == list) {
        $map: $top;
        $l-bottom: $bottom;
        $l-bg: $bg;
        @if (length($map) == 1) {
            $top: nth($map, 1);
            $bottom: $l-bottom;
            $bg: $l-bg;
        } @else if (length($map) == 2) {
            $top: nth($map, 1);
            $bottom: nth($map, 2);
            @if ($l-bottom != null) {
                $bg: $l-bottom;
            } @else {
                $bg: $l-bg;
            }
        } @else if (length($map) == 3) {
            $top: nth($map, 1);
            $bottom: nth($map, 2);
            $bg: nth($map, 3);
        } @else {
            @error "section() argument should contain 1..3 items if passed as list of values";
        }
    }
    $prop: margin;
    @if ($bg != null) {
        $prop: padding;
    }
    @if ($top != null) {
        #{$prop}-top: v($top);
    }
    @if ($bottom != null) {
        #{$prop}-bottom: v($bottom);
    }
    @if ($bg != null) {
        background: $bg;
    }
}

// Section information declaration with responsive modifications
//
// @param string $key           Responsive configuration key to get information from
// @param int|string|list $top  Either top margin or list with one or more parameters for mixin
// @param int|string $bottom    Bottom margin
// @param mixed $bg             Background for section
@mixin r-section($key, $top: null, $bottom: null, $bg: null) {
    @include section($top, $bottom, $bg);
    //noinspection SassScssResolvedByNameOnly
    @if (function-exists(is-responsive) and is-responsive()) {
        @include r-each-if($key) {
            $section: r-get($key);
            @if (type-of($section) == map) {
                @each $prop, $value in $section {
                    @if ($prop == section) {
                        @include section($value);
                    } @else if ($prop == layout) {
                        @include with-layout($value) {
                            @content;
                        }
                    } @else if($prop == span) {
                        @include span($value);
                    } @else if (index(margin padding, $prop)) {
                        #{$prop}: v($value);
                    } @else if ($prop == css) {
                        @if (type-of($value) == map) {
                            @each $cp, $cv in $value {
                                #{$cp}: v($cv);
                            }
                        } @else {
                            @error 'Additional CSS properties for r-section() should be defined as map';
                        }
                    }
                }
             } @else if (type-of($section) == list) {
                @include section($section);
            } @else {
                @error 'Invalid type "' + type-of($section) + '" of section definition for responsive configuration key "' + $key + '" at "' + r-id() + '"';
            }
        }
    }
}
