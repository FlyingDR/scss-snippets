@import "compass/typography/units";
@import "functions";

$units-use-rem: false !default;
$units-rem-font-size: 16px !default;
$units-unit-size: 20px !default;
$units-initialized: false;

// Normalize given value and convert its units if necessary
//
// @param string|number|list $value     Value to normalize
// @param boolean|null $use-rem         Override rem usage for this value
// @return string|number|list $value
@function v($value, $use-rem: null) {
    $parsed: parse-important($value);
    $value: nth($parsed, 1);
    $important: nth($parsed, 2);
    $result: ();
    @if ($use-rem == null) {
        $use-rem: $units-use-rem;
    }
    @each $v in $value {
        @if (type-of($v) == number) {
            @if (unitless($v) and $v != 0) {
                //noinspection CssInvalidFunction
                $v: u($v);
            } @else if ($v == 0 or not index((px, rem), unit($v))) {
                $v: $v;
            } @else if ($use-rem and (unit($v) != rem)) {
                $v: convert-length($v, rem);
            } @else if ((not $use-rem) and (unit($v) != px)) {
                $v: convert-length($v, px);
            }
        }
        $result: append($result, $v);
    }
    @if ($important) {
        $result: append($result, !important);
    }
    @if (length($result) == 0) {
        @return null;
    } @else if (length($result) == 1) {
        @return nth($result, 1);
    } @else {
        @return $result;
    }
}

// Define length in "units"
//
// @param number $value    Amount of units to use
// @return number
@function u($value: 1) {
    @if ($value == 0) {
        @return 0;
    }
    @if (type-of($value) == number) {
        @if (not unitless($value)) {
            $value: v($value, false) / 1px;
        }
        @return v(uround($units-unit-size * $value));
    } @else {
        @error 'Only number values are accepted for u()';
    }
}

// Backward compatible alias for u() function
@function spacer($value: 1) {
    @return u($value);
}

// Get information about current unit
//
// @param boolean $get-unit     true to get current unit name (e.g. "px"), false to get base number of current unit (e.g. 1px) (default)
// @return number|string
@function current-unit($get-unit: false) {
    @if ($units-use-rem) {
        @if ($get-unit) {
            @return rem;
        } @else {
            @return 1rem;
        }
    } @else {
        @if ($get-unit) {
            @return px;
        } @else {
            @return 1px;
        }
    }
}

// Initialize units module
//
// @param boolean|string $use-rem   true or "rem" to use rem units, false or "px" to use px units
// @param number $rem-font-size     Base size for rem unit
// @param number $unit-size         Size of single "unit" for u() function
@mixin units-init($use-rem: $units-use-rem, $rem-font-size: $units-rem-font-size, $unit-size: $units-unit-size) {
    @if (not $units-initialized) {
        $units-use-rem: ($use-rem == true or $use-rem == rem) !global;
        $units-rem-font-size: $rem-font-size !global;
        $units-unit-size: $unit-size !global;
        $base-font-size: $units-rem-font-size !global;
        @if ($units-use-rem) {
            html, body {
                font-size: $units-rem-font-size;
            }
        }
    }
}
